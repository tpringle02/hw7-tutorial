[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Linear Regression Tutorial",
    "section": "",
    "text": "In this tutorial you will perform a linear regression and make the machine learn.\nNow, to run a code block in Jupyter Notebooks, click into it and hit ctrl + enter.\nIf the key command doesn’t work, hit the triangle button in the upper left.\nThe first step, of course, is to load the data. We will be using a dataset of shampoo sales over 3 years.\n\nimport csv\nimport datetime as dt\n\nwith open(\"shampoo.csv\", \"r\") as shamwow:\n    data = list(csv.reader(shamwow))[1:]\n\n# Convert the sales into a float\nsales = [float(point[1]) for point in data]\ndates = [dt.datetime.strptime(\"199\" + point[0],'%Y-%m').date() \n         for point in data]\n\nprint(sales[0:5])\nprint(dates[0:2])\n\n[266.0, 145.9, 183.1, 119.3, 180.3]\n[datetime.date(1991, 1, 1), datetime.date(1991, 2, 1)]\n\n\nLet’s plot the data in a plot that’s as scattered as my brain while writing this tutorial:\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n# Format X-axis properly\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%Y'))\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=5))\nplt.gcf().autofmt_xdate()\n\n# Plot with X-axis as date and Y-axis as sales\npoints = plt.scatter(dates, sales)\n\n\n\n\nNow let’s perform the actual linear regression. We’re fitting the data to a line. What degree polynomial does that correspond to? Hopefully I have at least that many degrees by the time I leave college…\n\nimport numpy as np\n\n# Converting the datetime objects into an integer\ncounter = 1\nnumeric_months = []\nfor date in dates:\n    numeric_months.append(counter)\n    counter += 1\n\n# Linear regression using a polynomial of a certain degree\nlinear_regression = np.polyfit(numeric_months, sales, 1)\n\nRemember like 5 years ago when you learned about slope-intercept form? Y’know, y = mx + b where m is the slope and b is the y-intercept? Don’t ask me why I still remember that, but we’re gonna use it now to plot the linear regression line:\n\nimport matplotlib.ticker as ticker\n\nm, b = linear_regression\n\n# Replicate the same formatting as the dates\nformatted_dates = [date.strftime('%m/%Y') for date in dates]\nformatted_dates.insert(0, \"12/1990\")\nticks = [0] + numeric_months\n\n# Plot with X-axis as dates\nplt.gca().set_xticks(ticks, formatted_dates)\nplt.gcf().autofmt_xdate()\nplt.gca().xaxis.set_major_locator(ticker.MultipleLocator(5))\npoints = plt.scatter(numeric_months, sales)\n\n# One of them is the Y-intercept, and one of them is slope\nline = plt.axline((0, b), slope=m, color=\"red\")\n\n\n\n\nCongratulations, you did it! Now go to the upper left corner, hit file, press new, open a terminal, get to the right directory, and type\nquarto render 00_core.ipynb --to docx\nThen, simply convert it to a PDF and email it to Alejandro and CC Prof. Poshyvanyk!\nReferences:\nWhere I found the shampoo data: https://machinelearningmastery.com/time-series-datasets-for-machine-learning/\nOriginal Source: Makridakis, S., Wheelwright, S.C. and Hyndman, R.J. (1998) Forecasting: Methods and Applications. 3rd Edition, Wiley, New York."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-linear-regression-tutorial",
    "section": "",
    "text": "Behold, the NBDEV Linear Regression Tutorial for students of CSCI 435!\n\nRequirements\n\n\nInstall JupyterLab\n\nconda install -c conda-forge -y jupyterlab OR pip install jupyterlab\n\nInstall nbdev\n\nMac and Linux:\n\nconda install -c fastai -y nbdev OR pip install nbdev\n\nWindows:\n\npip install nbdev==2.3.7\n\n\nInstall quarto\n\nnvdev_install_quarto\n\nWindows will redirect you to install it at the Quarto website\nMake sure to restart your terminal afterwards\n\npip install jupyterlab-quarto\n\nInstall the required modules if you don’t have them already\n\nUse either pip or conda\nmatplotlib and numpy\nPython has csv and datetime already\n\n\n\n\nTutorial Steps\n\n\nCreate a new repository and clone it to your computer\nGo to the terminal and make sure you’re in your repo’s directory\nRun nbdev_new to generate necessary files\nReplace nbs/00_core.ipynb and nbs/index.ipynb with the ones in this repository, and add shampoo.csv into the nbs folder\nRun nbdev_readme to generate a README.md that should look like this one\nRun jupyter lab in the repository\nProgram nbs/00_core.ipynb such that everything works properly and save your PDF\nRun nbdev_install_hooks\nPush your changes to your Github\nGo to your Github Settings, click Deploy from a branch, and select gh-pages.\nReturn to Github Code, click the gear on About, and set the website to Github Pages\nSend the PDF and your Github Pages website to Alejandro and CC Prof. Poshyvanyk!\n\n\n\nResources Utilized\n\n\nhttps://nbdev.fast.ai/tutorials/tutorial.html\nhttps://jmp75.github.io/work-blog/posts/20221007-nbdev-windows/\n\nnbdev isn’t actually designed for Windows but this madlad somehow made it work anyways\n\n\nP.S. I wrote this entire tutorial in one night."
  }
]